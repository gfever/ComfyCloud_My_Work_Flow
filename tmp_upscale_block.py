del pipe
torch.cuda.empty_cache()

print(f"‚úì –ö–∞–¥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {FRAMES_DIR}")
# === UPSCALE –° REAL-ESRGAN (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û) ===
print_separator()
print("üìà –ê–ü–°–ö–ï–ô–õ –ö–ê–î–†–û–í –° REAL-ESRGAN")
print_separator(nl_before=False)

# –ó–∞—â–∏—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —è—á–µ–π–∫–∞ –±—ã–ª–∞ idempotent –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–¥–µ–ª—å–Ω–æ
import os
if 'WORKSPACE' not in globals():
    WORKSPACE = os.getcwd()
    print(f"‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WORKSPACE –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é: {WORKSPACE}")
if 'FRAMES_DIR' not in globals():
    FRAMES_DIR = f"{WORKSPACE}/frames"
    print(f"‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è FRAMES_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é: {FRAMES_DIR}")
if 'DATASET_DIR' not in globals():
    DATASET_DIR = f"{WORKSPACE}/dataset"
    print(f"‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATASET_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é: {DATASET_DIR}")

os.makedirs(FRAMES_DIR, exist_ok=True)
os.makedirs(DATASET_DIR, exist_ok=True)

upscale_model = f"{DATASET_DIR}/{UPSCALE_MODEL_NAME}"

if os.path.exists(upscale_model):
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º Real-ESRGAN –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not os.path.exists(f"{WORKSPACE}/Real-ESRGAN"):
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Real-ESRGAN...")
        import subprocess, os
        subprocess.check_call(["git", "clone", "https://github.com/xinntao/Real-ESRGAN", f"{WORKSPACE}/Real-ESRGAN"])
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    os.chdir(f"{WORKSPACE}/Real-ESRGAN")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ pip –∏ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
    LOG_DIR = os.path.join(WORKSPACE, 'logs')
    os.makedirs(LOG_DIR, exist_ok=True)
    INSTALL_LOG = os.path.join(LOG_DIR, 'real_esrgan_install.log')
    INFERENCE_LOG = os.path.join(LOG_DIR, 'real_esrgan_inference.log')

    def try_install_packages(pkg_list, install_log_path=INSTALL_LOG):
        import subprocess, sys, time
        cmd = [sys.executable, '-m', 'pip', 'install'] + pkg_list + ['--verbose']
        print('Running pip install (verbose). Full log will be written to:', install_log_path)
        with open(install_log_path, 'w', encoding='utf-8') as lf:
            lf.write(f'Command: {" ".join(cmd)}\n')
            lf.write('Timestamp: ' + time.strftime('%Y-%m-%d %H:%M:%S') + '\n\n')
            try:
                # 1) Try to install system build deps (works in Kaggle/Colab if allowed)
                try:
                    lf.write('\n=== Attempting apt-get install build deps ===\n')
                    print('Attempting apt-get install build-essential, cmake, libgl1-mesa-dev, libjpeg-dev (may require root)')
                    subprocess.run(['apt-get', 'update'], check=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                    res_apt = subprocess.run(['apt-get', 'install', '-y', 'build-essential', 'cmake', 'libgl1-mesa-dev', 'libjpeg-dev'], capture_output=True, text=True, timeout=300)
                    lf.write('=== APT STDOUT ===\n')
                    lf.write(res_apt.stdout or '')
                    lf.write('\n=== APT STDERR ===\n')
                    lf.write(res_apt.stderr or '')
                except Exception as _e:
                    lf.write('\n=== APT STEP FAILED ===\n')
                    lf.write(repr(_e))
                    lf.write('\n')
                    print('Note: apt-get step failed or not permitted in this environment; continuing to pip steps')

                # 2) Upgrade core Python packaging tools to reduce build errors
                lf.write('\n=== Upgrading pip, wheel, setuptools, setuptools_scm ===\n')
                subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip', 'wheel', 'setuptools', 'setuptools_scm'], capture_output=True, text=True, timeout=300)
                lf.write('Upgraded pip/setuptools/wheel/setuptools_scm\n')

                res = subprocess.run(cmd, capture_output=True, text=True, timeout=900)
                lf.write('=== STDOUT ===\n')
                lf.write(res.stdout or '')
                lf.write('\n=== STDERR ===\n')
                lf.write(res.stderr or '')
                lf.flush()
                if res.returncode == 0:
                    print('‚úì packages installed successfully; verbose log saved to', install_log_path)
                    return True
                else:
                    print('‚úó pip install failed with return code', res.returncode)
                    raise RuntimeError(f'pip install failed (return code {res.returncode}). See log: {install_log_path}')
            except Exception as e:
                lf.write('\n=== EXCEPTION ===\n')
                lf.write(repr(e))
                lf.flush()
                print('‚úó Exception during pip install; see log:', install_log_path)
                raise

    # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –ª–æ–≥ –∏ –º–æ–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
    try:
        try_install_packages(['basicsr', 'facexlib', 'gfpgan', 'realesrgan'])
    except Exception as e:
        # –Ø–≤–Ω–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –¥–∞—ë–º –ø—É—Ç—å –∫ –ª–æ–≥–∞–º.
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Real-ESRGAN: {e}\n–°–º. –ª–æ–≥: {INSTALL_LOG}")

    # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤ weights
    import shutil
    os.makedirs('weights', exist_ok=True)
    shutil.copy(upscale_model, 'weights/')

    # –ê–ø—Å–∫–µ–π–ª –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ (–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç Real-ESRGAN —á–µ—Ä–µ–∑ Python)
    print("\n–ó–∞–ø—É—Å–∫ –∞–ø—Å–∫–µ–π–ª–∞...")
    # –ó–∞–ø—É—Å–∫ inference —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º stdout/stderr –≤ —Ñ–∞–π–ª
    with open(INFERENCE_LOG, 'w', encoding='utf-8') as lf:
        lf.write('Running inference_realesrgan.py\n')
        lf.flush()
        try:
            res = subprocess.run([sys.executable, 'inference_realesrgan.py', '-n', '4x-UltraSharp', '-i', FRAMES_DIR, '-o', FRAMES_DIR + '_upscaled', '--fp32'], capture_output=True, text=True, timeout=3600)
            lf.write('=== STDOUT ===\n')
            lf.write(res.stdout or '')
            lf.write('\n=== STDERR ===\n')
            lf.write(res.stderr or '')
            lf.flush()
            if res.returncode != 0:
                print('\n‚ö†Ô∏è Real-ESRGAN inference failed with return code', res.returncode)
                print('See inference log:', INFERENCE_LOG)
                # If failure due to missing torchvision functional_tensor, try to install/upgrade torchvision and retry once
                stderr_lower = (res.stderr or '').lower()
                if 'functional_tensor' in stderr_lower or "no module named 'torchvision.transforms.functional_tensor'" in (res.stderr or ''):
                    lf.write('\nDetected missing torchvision functional_tensor. Attempting to install/upgrade torchvision and retry inference.\n')
                    lf.flush()
                    try:
                        # Attempt to install torchvision (will pick a compatible wheel if available)
                        install_cmd = [sys.executable, '-m', 'pip', 'install', '--upgrade', 'torchvision', '-f', 'https://download.pytorch.org/whl/torch_stable.html']
                        lf.write('Retry install command: ' + ' '.join(install_cmd) + '\n')
                        lf.flush()

                        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±–æ–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: –∑–∞–ø—É—Å—Ç–∏–º inference —á–µ—Ä–µ–∑ shim,
                        # –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—Å—Ç –º–æ–¥—É–ª—å torchvision.transforms.functional_tensor, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç,
                        # –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–≤ –≤—ã–∑–æ–≤—ã –Ω–∞ torchvision.transforms.functional.
                        try:
                            lf.write('\nAttempting shim run (provides torchvision.transforms.functional_tensor at runtime)\n')
                            lf.flush()
                            shim_path = os.path.join(os.getcwd(), 'inference_with_torchvision_shim.py')
                            with open(shim_path, 'w', encoding='utf-8') as sf:
                                shim_lines = [
                                    "import sys, types",
                                    "try:",
                                    "    import torchvision.transforms.functional_tensor as ft",
                                    "except Exception:",
                                    "    try:",
                                    "        import torchvision.transforms.functional as f",
                                    "        mod = types.ModuleType('torchvision.transforms.functional_tensor')",
                                    "        if hasattr(f, 'rgb_to_grayscale'):",
                                    "            mod.rgb_to_grayscale = f.rgb_to_grayscale",
                                    "        if hasattr(f, 'convert_image_dtype'):",
                                    "            mod.convert_image_dtype = getattr(f, 'convert_image_dtype', None)",
                                    "        sys.modules['torchvision.transforms.functional_tensor'] = mod",
                                    "    except Exception:",
                                    "        pass",
                                    "",
                                    "# forward to the original script",
                                    "import runpy",
                                    "runpy.run_path('inference_realesrgan.py', run_name='__main__')",
                                ]
                                sf.write('\n'.join(shim_lines) + '\n')

                            res_shim = subprocess.run([sys.executable, shim_path, '-n', '4x-UltraSharp', '-i', FRAMES_DIR, '-o', FRAMES_DIR + '_upscaled', '--fp32'], capture_output=True, text=True, timeout=3600)
                            lf.write('\n=== SHIM STDOUT ===\n')
                            lf.write(res_shim.stdout or '')
                            lf.write('\n=== SHIM STDERR ===\n')
                            lf.write(res_shim.stderr or '')
                            lf.flush()

                            if res_shim.returncode == 0:
                                lf.write('\nShim run succeeded; log saved to inference log.\n')
                                lf.flush()
                                # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç shim'–∞
                                res = res_shim
                            else:
                                lf.write('\nShim run failed; will attempt to install/upgrade torchvision and retry inference.\n')
                                lf.flush()
                                # fallback: –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å torchvision –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                                res_install = subprocess.run(install_cmd, capture_output=True, text=True, timeout=600)
                                lf.write('=== TORCHVISION INSTALL STDOUT ===\n')
                                lf.write(res_install.stdout or '')
                                lf.write('\n=== TORCHVISION INSTALL STDERR ===\n')
                                lf.write(res_install.stderr or '')
                                lf.flush()

                                if res_install.returncode == 0:
                                    lf.write('\ntorchvision installed/upgraded; retrying inference...\n')
                                    lf.flush()
                                    # retry inference
                                    res2 = subprocess.run([sys.executable, 'inference_realesrgan.py', '-n', '4x-UltraSharp', '-i', FRAMES_DIR, '-o', FRAMES_DIR + '_upscaled', '--fp32'], capture_output=True, text=True, timeout=3600)
                                    lf.write('\n=== RETRY STDOUT ===\n')
                                    lf.write(res2.stdout or '')
                                    lf.write('\n=== RETRY STDERR ===\n')
                                    lf.write(res2.stderr or '')
                                    lf.flush()
                                    if res2.returncode == 0:
                                        print('‚úì Real-ESRGAN inference completed after installing torchvision; log saved to', INFERENCE_LOG)
                                        # replace res with res2 so downstream continues
                                        res = res2
                                    else:
                                        print('\n‚úó Retry also failed. See inference log:', INFERENCE_LOG)
                                        raise RuntimeError(f'Real-ESRGAN inference retry failed (return code {res2.returncode}). See log: {INFERENCE_LOG}')
                                else:
                                    print('\n‚úó Could not install/upgrade torchvision. See install log in the inference log file.')
                                    raise RuntimeError(f'Could not install torchvision (return code {res_install.returncode}). See log: {INFERENCE_LOG}')
                        except Exception as _e:
                            lf.write('\n=== EXCEPTION DURING TORCHVISION SHIM/INSTALL/RETRY ===\n')
                            lf.write(repr(_e))
                            lf.flush()
                            print('‚úó Exception during torchvision shim/install/retry. See inference log:', INFERENCE_LOG)
                            raise
                else:
                    raise RuntimeError(f'Real-ESRGAN inference failed (return code {res.returncode}). See log: {INFERENCE_LOG}')
            else:
                print('‚úì Real-ESRGAN inference completed; log saved to', INFERENCE_LOG)
        except Exception as e:
            print('‚úó Exception during Real-ESRGAN inference; see log:', INFERENCE_LOG)
            raise

    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã –∞–ø—Å–∫–µ–π–ª–µ–Ω–Ω—ã–º–∏
    shutil.rmtree(FRAMES_DIR, ignore_errors=True)
    shutil.move(FRAMES_DIR + '_upscaled', FRAMES_DIR)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ (Real-ESRGAN –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å)
    import glob
    upscaled_files = sorted(glob.glob(f"{FRAMES_DIR}/*_out.png"))
    for i, filepath in enumerate(upscaled_files):
        os.rename(filepath, f"{FRAMES_DIR}/{i}.png")

    print("\n‚úì –ê–ø—Å–∫–µ–π–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print('Install log:', INSTALL_LOG)
    print('Inference log:', INFERENCE_LOG)
    os.chdir(WORKSPACE)
else:
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏ –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    candidates = [
        os.path.join(DATASET_DIR, UPSCALE_MODEL_NAME),
        os.path.join(WORKSPACE, 'dataset', UPSCALE_MODEL_NAME),
        os.path.join(WORKSPACE, 'models', UPSCALE_MODEL_NAME),
        '/kaggle/input/comfyui-models-gojo/' + UPSCALE_MODEL_NAME,
        os.path.expanduser('~/models/' + UPSCALE_MODEL_NAME),
    ]
    found = None
    for p in candidates:
        if p and os.path.exists(p):
            found = p
            break

    if found:
        print(f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å Upscale –Ω–∞–π–¥–µ–Ω–∞: {found} ‚Äî –æ–±–Ω–æ–≤–ª—è—é –ø—É—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞—é –∞–ø—Å–∫–µ–π–ª.")
        upscale_model = found
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∑–∞–ø—É—Å–∫–∞ –∞–ø—Å–∫–µ–π–ª–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ): –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ/–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–∑–∞–ø—É—Å–∫
        if not os.path.exists(f"{WORKSPACE}/Real-ESRGAN"):
            print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Real-ESRGAN...")
            import subprocess, os
            subprocess.check_call(["git", "clone", "https://github.com/xinntao/Real-ESRGAN", f"{WORKSPACE}/Real-ESRGAN"])
        os.chdir(f"{WORKSPACE}/Real-ESRGAN")
        SKIP_REAL_ESRGAN = False
        ok = try_install_packages(['basicsr', 'facexlib', 'gfpgan', 'realesrgan'])
        if not ok:
            SKIP_REAL_ESRGAN = True
            print('\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å. –ê–ø—Å–∫–µ–π–ª –ø—Ä–æ–ø—É—â–µ–Ω.')
        import shutil, glob
        os.makedirs('weights', exist_ok=True)
        shutil.copy(upscale_model, 'weights/')
        print("\n–ó–∞–ø—É—Å–∫ –∞–ø—Å–∫–µ–π–ª–∞...")
        if not SKIP_REAL_ESRGAN:
            try:
                subprocess.check_call([sys.executable, 'inference_realesrgan.py', '-n', '4x-UltraSharp', '-i', FRAMES_DIR, '-o', FRAMES_DIR + '_upscaled', '--fp32'])
            except subprocess.CalledProcessError as e:
                print('\n‚ö†Ô∏è Real-ESRGAN inference failed:', e)
                print('–ê–ø—Å–∫–µ–π–ª –ø—Ä–æ–ø—É—â–µ–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ –∞–ø—Å–∫–µ–π–ª–∞')
                SKIP_REAL_ESRGAN = True
        else:
            print('–ê–ø—Å–∫–µ–π–ª –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π')
        shutil.rmtree(FRAMES_DIR, ignore_errors=True)
        shutil.move(FRAMES_DIR + '_upscaled', FRAMES_DIR)
        upscaled_files = sorted(glob.glob(f"{FRAMES_DIR}/*_out.png"))
        for i, filepath in enumerate(upscaled_files):
            os.rename(filepath, f"{FRAMES_DIR}/{i}.png")
        print("\n‚úì –ê–ø—Å–∫–µ–π–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")
        os.chdir(WORKSPACE)
    else:
        print("‚ö†Ô∏è Upscale –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–ø—Å–∫–µ–π–ª.")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª '4x-UltraSharp.pth' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–¥–Ω–æ–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
        for c in candidates:
            print(f"     - {c}")
        print("   –ò–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ –ø–∞–ø–∫—É –≤–∞—à–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DATASET_DIR –≤ –Ω–∞—á–∞–ª–µ –Ω–æ—É—Ç–±—É–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:")
        print("     DATASET_DIR = '/kaggle/input/comfyui-models-gojo'")
        print("   –ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ kernel –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —è—á–µ–π–∫–∏ –∑–∞–Ω–æ–≤–æ.")

